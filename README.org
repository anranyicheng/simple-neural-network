#+TITLE: Simple Neural Network
#+AUTHOR: Guillaume Le Vaillant
#+DATE: 2020-10-18
#+EMAIL: glv@posteo.net
#+LANGUAGE: en
#+OPTIONS: num:nil toc:nil html-postamble:nil html-scripts:nil
#+HTML_DOCTYPE: html5


* Description

*simple-neural-network* is a Common Lisp library for creating, training and
using basic neural networks.

The only dependency is the *cl-store* library.

* License

*simple-neural-network* is released under the GPL-3 license. See the [[file:LICENSE][LICENSE]]
file for details.

* API

The functions are in the /simple-neural-network/ package. You can use the
shorter /snn/ nickname if you prefer.

The library works with double floats. Your inputs and targets must therefore be
vectors of ~double-float~ numbers. For better results, they should also be
normalized to contain values between 0 and 1.


#+BEGIN_SRC lisp
(create-neural-network input-size output-size &rest hidden-layers-sizes)
#+END_SRC

Create a neural network having /input-size/ inputs, /output-size/ outputs, and
optionally some intermediary layers whose sizes are specified by
/hidden-layers-sizes/. The neural network is initialized with random weights
and biases.


#+BEGIN_SRC lisp
(train neural-network inputs targets learning-rate)
#+END_SRC

Train the /neural-network/ at a given /learning-rate/ using some /inputs/ and
/targets/.


#+BEGIN_SRC lisp
(predict neural-network input &optional output)
#+END_SRC

Return the output computed by the /neural-network/ for a given /input/. If
/output/ is not ~nil~, the output is written in it, otherwise a new vector is
allocated.


#+BEGIN_SRC lisp
(store neural-network place)
#+END_SRC

Store the /neural-network/ to /place/, which must be a stream or
a pathname-designator.


#+BEGIN_SRC lisp
(restore place)
#+END_SRC

Restore the neural network stored in /place/, which must be a stream or
a pathname-designator.


#+BEGIN_SRC lisp
(index-of-max-value values)
#+END_SRC

Return the index of the greatest value in /values/.


#+BEGIN_SRC lisp
(same-category-p output target)
#+END_SRC

Return ~t~ if calls to ~index-of-max-value~ on /output/ and /target/ return the
same value, and ~nil~ otherwise. This function is only useful when the neural
network was trained to classify the inputs in several categories, when targets
contain a single 1 and 0s.


#+BEGIN_SRC lisp
(accuracy neural-network inputs targets &key test)
#+END_SRC

Return the rate of good guesses computed by the /neural-network/ when testing
it with some /inputs/ and /targets/. /test/ must be a function taking an output
and a target returning ~t~ if the output is considered to be close enough to
the target, and ~nil~ otherwise. ~same-category-p~ is used by default.

* Example

Neural network for the XOR function:

#+BEGIN_SRC lisp
(defvar inputs '(#(0.0d0 0.0d0)
                 #(0.0d0 1.0d0)
                 #(1.0d0 0.0d0)
                 #(1.0d0 1.0d0)))
(defvar targets '(#(0.0d0)
                  #(1.0d0)
                  #(1.0d0)
                  #(0.0d0)))
(defvar nn (snn:create-neural-network 2 1 2))
(dotimes (i 10000)
  (snn:train nn inputs targets 0.5d0))

(snn:predict nn #(0.0d0 0.0d0))
#(0.011517370631772416d0)

(snn:predict nn #(1.0d0 0.0d0))
#(0.9890331262598525d0)

(snn:predict nn #(0.0d0 1.0d0))
#(0.9868481167720594d0)

(snn:predict nn #(1.0d0 1.0d0))
#(0.01031896572443079d0)
#+END_SRC

* Tests

The tests require the *fiveam* and *chipz* libraries. They can be run with:

#+BEGIN_SRC lisp
(asdf:test-system "simple-neural-network")
#+END_SRC
